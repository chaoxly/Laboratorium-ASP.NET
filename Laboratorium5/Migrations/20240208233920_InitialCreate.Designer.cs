// <auto-generated />
using System;
using Laboratorium5;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Laboratorium5.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240208233920_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.15");

            modelBuilder.Entity("Laboratorium5.Models.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Data_wydania")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nazwa")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Notowanie")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Zespol")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Albums");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Data_wydania = new DateTime(2021, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nazwa = "Jeszcze 5 minut",
                            Notowanie = 4124124,
                            Zespol = "Kizo"
                        },
                        new
                        {
                            Id = 2,
                            Data_wydania = new DateTime(2022, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nazwa = "Uczta",
                            Notowanie = 52323423,
                            Zespol = "Sanah"
                        },
                        new
                        {
                            Id = 3,
                            Data_wydania = new DateTime(2020, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nazwa = "W samo południe",
                            Notowanie = 63223423,
                            Zespol = "Reto"
                        },
                        new
                        {
                            Id = 4,
                            Data_wydania = new DateTime(2018, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nazwa = "Origins",
                            Notowanie = 4756454,
                            Zespol = "Imagine Dragons"
                        },
                        new
                        {
                            Id = 5,
                            Data_wydania = new DateTime(2017, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nazwa = "Evolve",
                            Notowanie = 82323423,
                            Zespol = "Imagine Dragons"
                        },
                        new
                        {
                            Id = 6,
                            Data_wydania = new DateTime(2012, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Nazwa = "NightVisions",
                            Notowanie = 73223423,
                            Zespol = "Imagine Dragons"
                        });
                });

            modelBuilder.Entity("Laboratorium5.Models.Piosenka", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AlbumId")
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("Czas_trwania")
                        .HasColumnType("TEXT");

                    b.Property<string>("Tytul")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("Songs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlbumId = 1,
                            Czas_trwania = new TimeSpan(0, 0, 3, 39, 0),
                            Tytul = "Disney"
                        },
                        new
                        {
                            Id = 2,
                            AlbumId = 1,
                            Czas_trwania = new TimeSpan(0, 0, 2, 21, 0),
                            Tytul = "Z nadzieją"
                        },
                        new
                        {
                            Id = 3,
                            AlbumId = 1,
                            Czas_trwania = new TimeSpan(0, 0, 3, 13, 0),
                            Tytul = "Forma"
                        },
                        new
                        {
                            Id = 4,
                            AlbumId = 2,
                            Czas_trwania = new TimeSpan(0, 0, 3, 23, 0),
                            Tytul = "Szary świat"
                        },
                        new
                        {
                            Id = 5,
                            AlbumId = 2,
                            Czas_trwania = new TimeSpan(0, 0, 3, 45, 0),
                            Tytul = "Ostatnia nadzieja"
                        },
                        new
                        {
                            Id = 6,
                            AlbumId = 3,
                            Czas_trwania = new TimeSpan(0, 0, 3, 0, 0),
                            Tytul = "Billy Kid"
                        },
                        new
                        {
                            Id = 7,
                            AlbumId = 3,
                            Czas_trwania = new TimeSpan(0, 0, 3, 31, 0),
                            Tytul = "Blask"
                        },
                        new
                        {
                            Id = 8,
                            AlbumId = 3,
                            Czas_trwania = new TimeSpan(0, 0, 2, 26, 0),
                            Tytul = "BMW"
                        },
                        new
                        {
                            Id = 9,
                            AlbumId = 4,
                            Czas_trwania = new TimeSpan(0, 0, 3, 9, 0),
                            Tytul = "Natural"
                        },
                        new
                        {
                            Id = 10,
                            AlbumId = 5,
                            Czas_trwania = new TimeSpan(0, 0, 3, 24, 0),
                            Tytul = "Believer"
                        },
                        new
                        {
                            Id = 11,
                            AlbumId = 6,
                            Czas_trwania = new TimeSpan(0, 0, 3, 6, 0),
                            Tytul = "Radioactive"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "80fabf7c-b155-437b-a587-b16dae1cab5c",
                            ConcurrencyStamp = "80fabf7c-b155-437b-a587-b16dae1cab5c",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "bea5ea06-8d69-45bc-94c1-5b843eb8fba9",
                            ConcurrencyStamp = "bea5ea06-8d69-45bc-94c1-5b843eb8fba9",
                            Name = "user",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8046aaf2-32b1-47c9-a6aa-9522b6240b32",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3fd57766-5922-4229-96f4-2b73b8fa2cc0",
                            Email = "adam@wsei.edu.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADAM@WSEI.EDU.PL",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEBq07H4WItGDRFaqAP5GTGjqQd8Pv0LDXhEVpn4BNONAArOeLU1V+4/WYcPseHjdCQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3b565467-e765-4068-9b47-deb743c2d087",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "bc7e0786-4d09-4595-aa48-53f7c27daf97",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "77e66244-947b-4136-85d8-062dc179183e",
                            Email = "user@esei.edu.pl",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@WSEI.EDU.PL",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAIAAYagAAAAEE4h8ab1BuQ4Z9BkRwxWo2iQsjFttPR00XeyCHUfyjFGbyk/HkNSEBFCETr6ggVKUg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8957ba4a-40e2-488c-b74f-d88609301cc9",
                            TwoFactorEnabled = false,
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8046aaf2-32b1-47c9-a6aa-9522b6240b32",
                            RoleId = "80fabf7c-b155-437b-a587-b16dae1cab5c"
                        },
                        new
                        {
                            UserId = "bc7e0786-4d09-4595-aa48-53f7c27daf97",
                            RoleId = "bea5ea06-8d69-45bc-94c1-5b843eb8fba9"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Laboratorium5.Models.Piosenka", b =>
                {
                    b.HasOne("Laboratorium5.Models.Album", "Album")
                        .WithMany("Piosenki")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Album");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Laboratorium5.Models.Album", b =>
                {
                    b.Navigation("Piosenki");
                });
#pragma warning restore 612, 618
        }
    }
}
